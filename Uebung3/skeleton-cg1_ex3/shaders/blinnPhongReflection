#version 150

struct LightSource{
  //position in view space
  vec4 position;
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
};

struct Material{
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
  // shininess
  float shininess;
};

uniform LightSource lightSource;
uniform Material material;

// position and normal in view space
vec4 blinnPhongReflection(vec4 position, vec3 normal){
	
	vec4 ambientColor = lightSource.ambient * material.ambient;

	vec3 lightDirection = normalize(lightSource.position.xyz - position.xyz);
	float diff = dot(lightDirection, normal);

	vec3 H = normalize(lightDirection - position.xyz);
	float specAngle = max(dot(H, normal), 0.0);

	vec4 specularColor = lightSource.specular * material.specular * pow(material.shininess, specAngle);
	return ambientColor + diff*lightSource.diffuse*(material.diffuse + specularColor);
}
	
